.. solrpy documentation master file, created by
   sphinx-quickstart on Mon Jun 28 14:34:18 2010.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Solr API for Python
===================

``solrpy`` is a Python client for Solr_, an enterprise search server
built on top of Lucene_.  ``solrpy`` allows you to add documents to a
Solr instance, and then to perform queries and gather search results
from Solr using Python.


Overview
--------

Here's the basic gist::

    import solr

    # create a connection to a solr server
    s = solr.Solr('http://example.org:8083/solr')

    # add a document to the index
    doc = dict(
        id=1,
        title='Lucene in Action',
        author=['Erik Hatcher', 'Otis GospodnetiÄ‡'],
        )
    s.add(doc, commit=True)

    # do a search
    response = s.query('title:lucene')
    for hit in response.results:
        print hit['title']


More powerful queries
---------------------

Optional parameters for query, faceting, highlighting and more like this
can be passed in as Python parameters to the query method.  You just need
to convert the dot notation (e.g. ``facet.field``) to underscore notation
(e.g. ``facet_field``) so that they can be used as parameter names.

For example, let's say you wanted to get faceting information in your
search result::

    response = s.query(
        'title:lucene', facet='true', facet_field='subject')

and if the parameter takes multiple values you just pass them in as a list::

    response = s.query(
        'title:lucene', facet='true',
        facet_field=['subject', 'publisher'])


Community
---------

Feel free to join our `discussion list`_ if you have ideas or suggestions.
Also, please add examples to the wiki_ if you have the time and interest.


.. _Solr:  http://lucene.apache.org/solr/
.. _Lucene:  http://lucene.apache.org/java/docs/
.. _discussion list:  http://groups.google.com/group/solrpy
.. _wiki:  http://code.google.com/p/solrpy/w/list


Reference
---------

Data representation
~~~~~~~~~~~~~~~~~~~

Solr documents are simple collections of named fields; the fields may be
multi-valued, depending on the Solr schema being used.

In Python, these documents are modeled as dictionaries with the field
names as keys and field values (or sets of values) as values.  When
multiple values are presented to Solr, the value in the dictionary must
be a list, tuple or set.  (A ``frozenset`` is not accepted.)

Values may be strings (``str`` or ``unicode``), dates, datetimes, bools,
or ``None``.  Field values of ``None`` are omitted from the values
submitted to Solr.

``datetime.datetime`` values are converted to UTC.

``datetime.date`` values are converted to ``datetime.datetime`` values
at 00:00:00 with an assumed timezone of UTC.

``bool`` values are converted to the string values ``'true'`` or
``'false'``.


Exceptions
~~~~~~~~~~

The :mod:`solr` module provides everything you'll need.  There's an
exception that might be raised by many operations:

.. autoexception:: solr.SolrException
   :members: httpcode, reason, body
   :show-inheritance:

These exceptions, along with others, can be raised by the connection
objects that are provided.


Connections
~~~~~~~~~~~

There are two flavors of connection objects; one is provided to support
older applications, and the other provides more rational (and powerful)
access to commit controls.

Both connection classes are designed to work with the 2.2 response
format generated by Solr 1.2 and newer, but will likely work with the
older 2.1 response format as well.

.. class:: solr.Solr(url)

   Connect to the Solr instance at `url`.  If the Solr instance provides
   multiple cores, `url` should be to a specific core.
   Examples:

       | http://localhost:8080/solr
       | https://solr-server/solr

   Your python install must be compiled with SSL support for the
   ``https`` schemes to work. (Most pre-packaged pythons are.)

   Many keyword arguments can be specified to tailor instances for the
   needs of specific applications:

   `persistent`
       Keep a persistent HTTP connection open.
       Defaults to true.

   `timeout`
       Timeout, in seconds, for the server to response.  By default, use
       the Python default timeout.

   `ssl_key`, `ssl_cert`
       If using client-side key files for SSL authentication, these
       should be, respectively, your PEM key file and certificate file.
       
   `http_user`, `http_pass`
       If given, include HTTP Basic authentication in all request
       headers.

   `post_headers`
       A dictionary of headers that should be included in all requests
       to Solr.  This is a good way to provide the User-Agent or other
       specialized headers.

   `max_retries`
       Maximum number of retries to perform automatically.  Re-tries are
       only attempted when socket errors or
       :exc:`httplib.ImproperConnectionState` or
       :exc:`httplib.BadStatusLine` exceptions are generated from calls
       into :mod:`httplib`.

   .. automethod:: solr.Solr.query
   .. automethod:: solr.Solr.add
   .. automethod:: solr.Solr.commit
   .. automethod:: solr.Solr.optimize
   .. automethod:: solr.Solr.close


.. class:: solr.SolrConnection(url)

   This class is used by older applications of ``solrpy``; newer
   applications should use :class:`solr.Solr`.

   The constructor arguments and most methods are the same as for
   :class:`solr.Solr`; only these method signatures differ:

   .. automethod:: solr.SolrConnection.add
   .. automethod:: solr.SolrConnection.add_many


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
